本文的代码一共有三个大板块组成，分别为：
1、数据分割-融合
2、CNN分类器
3、CycleGAN
其中CNN分类器的模型是基于https://github.com/tompee26/FF-CNN-Binary-Classification提供的框架搭建的，CycleGAN是根据https://github.com/vanhuyz/CycleGAN-TensorFlow提供的框架搭建的，感谢两位作者提供的帮助！
三个板块分别对应文件夹Data_processing，Classifier与CycleGAN。

使用到的数据集为apple2orange数据集与summer2winter数据集，均可以在https://people.eecs.berkeley.edu/~taesung_park/CycleGAN/datasets/下载。
训练集的存放路径为./Data/Data_raw，两个域的数据分别存放在该路径的文件夹A与B下。
测试集的存放路径为./Data/Data_test/raw_data，两个域的数据分别存放在该路径的文件夹A与B下。

运行整个项目的流程如下：
1、运行./Data_processing/train_data_processor.py与./Data_processing/test_data_processor.py。
2、选取./Data/Data_processed/A/test文件夹内的一部分图片训练CNN分类器，人工将这部分图片中属于主体目标的移至./Data/Data_processed/A/train/1，属于背景的移至./Data/Data_processed/A/train/0。
3、选取./Data/Data_processed/B/test文件夹内的一部分图片训练CNN分类器，人工将这部分图片中属于主体目标的移至./Data/Data_processed/B/train/1，属于背景的移至./Data/Data_processed/B/train/0。
4、运行./Classifier/classifier.py，运行前先将参数CycleGAN_Train与Run_Train设置为True，再分别改变参数Data_A的值为True和False运行两次代码。
5、运行./Classifier/classifier.py，运行前先将参数CycleGAN_Train设置为True，Run_Train设置为False，再分别改变参数Data_A的值为True和False运行两次代码。
6、运行./Classifier/classifier.py，运行前先将参数CycleGAN_Train与Run_Train设置为False，再分别改变参数Data_A的值为True和False运行两次代码。
7、运行./CycleGAN/build_dta.py。
8、运行./CycleGAN/train.py。
9、运行./CycleGAN/export_graph.py，运行前先将参数checkpoint_dir设置为./CycleGAN/checkpoints文件夹下最新的文件夹名称。
10、运行./CycleGAN/inference.py。
11、运行./Data_processing/test_data_combiner.py，最终结果储存在./Data/Data_test/final_result下。
需要特别注意的是由于summer2winter任务不需要区分主体和背景，因此在处理summer2winter任务时不需要运行上述的2，3，4，5，6步骤，改为：
1、将./Data/Data_processed/A/test文件夹下的内容移至./Data/Data_processed/A/train/1。
2、将./Data/Data_processed/B/test文件夹下的内容移至./Data/Data_processed/B/train/1。
3、将./Data/Data_test/processed_data/A文件夹下的内容移至./Data/Data_test/classified_data/A。
4、将./Data/Data_test/processed_data/B文件夹下的内容移至./Data/Data_test/classified_data/B。

关于上述每一个步骤的解释如下：
1、将训练集和测试机的图片进行分割。
2、为CNN分类器准备A类图片的训练集。
3、为CNN分类器准备B类图片的训练集。
4、运行两次代码分别针对A类图片和B类图片训练了两个独立的CNN分类器，并将参数储存在./Classifier/save_net路径下。
5、将CycleGAN要用到的两个类的训练集图片通过两个训练好的CNN分类器。
6、将CycleGAN要用到的两个类的测试集图片通过两个训练好的CNN分类器。
7、将CycleGAN使用的训练集编码储存保存在./CycleGAN/tfrecords路径下，便于训练。
8、训练CycleGAN，训练的模型参数实时保存在./CycleGAN/checkpoints路径下。
9、导出./CycleGAN/checkpoints路径下指定的CycleGAN模型参数，最终到处模型到./CycleGAN/pretrained路径下。
10、将测试集导入CycleGAN进行生成。
11、将测试集生成的结果拼接成完整的图片。
关于一些关键的代码文件：
./Classifier/classifier.py
CNN分类器模型的最外层代码，可以通过修改一些控制参数针对不同的任务训练并运行CNN分类器。
./Classifier/model_train.py
CNN分类器的训练部分，训练的结果被保存在./Classifier/save_net路径下。
./Classifier/model_test.py
CNN分类器的测试部分，通过classifier.py的控制读取./Classifier/save_net路径下的参数并且对测试集运行分类器。
./CycleGAN/build_data.py
将训练CycleGAN使用的两类数据集编码存储为两个单独文件保存在./CycleGAN/tfrecords路径下，便于后续的操作。
./CycleGAN/export_graph.py
读取./CycleGAN/checkpoints路径下保存的参数并生成对应的CycleGAN模型，保存在./CycleGAN/pretrained路径下。
./CycleGAN/inference.py
根据./CycleGAN/pretrained路径下读取的训练好的模型，输入测试集进行图像转化。
./CycleGAN/train.py
读入./CycleGAN/tfrecords路径下的测试集信息并训练CycleGAN。
./Data_processing/train_data_processor.py
读入模型的训练集，从训练集中分割出小块的图像供后续模型使用。
./Data_processing/test_data_processor.py
读入模型的测试集，从测试集中分割出小块的图像供后续模型使用。
./Data_processing/test_data_combiner.py
将CycleGAN生成的小块图像拼接并融合，得到最终的图像。
